//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : TravelProcessor.java
//  @ Date : 09-04-2010
//  @ Author : 
//
//

package com.sony.travelRequest.action;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Iterator;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import org.springframework.security.GrantedAuthority;
import org.springframework.security.context.SecurityContextHolder;
import org.springframework.security.userdetails.UserDetails;

import com.ocpsoft.pretty.util.FacesElUtils;
import com.sony.travelRequest.dao.EmployeeDao;
import com.sony.travelRequest.dao.TravelRequestDao;
import com.sony.travelRequest.model.AdvanceAmount;
import com.sony.travelRequest.model.EmailConstants;
import com.sony.travelRequest.model.Employee;
import com.sony.travelRequest.model.HotelResv;
import com.sony.travelRequest.model.LodgingExpense;
import com.sony.travelRequest.model.RequestApproval;
import com.sony.travelRequest.model.TravelParamBean;
import com.sony.travelRequest.model.TravelRequest;
import com.sony.travelRequest.model.TravelResv;
import com.sony.travelRequest.model.TravelSettlement;
import com.sony.travelRequest.util.EmailComponent;
//import com.sony.travelRequest.model.LodgingExpense;
//import com.sony.travelRequest.model.MiscellaneousExpense;
//import com.sony.travelRequest.model.OthersExpense;



public class TravelProcessor {

	private int employeeId;
	private boolean financeDesk =false;

	private TravelRequest travelRequest;
	private TravelRequestDao travelRequestDao;
	private Employee employee;
	private EmployeeDao employeeDao;
	private String focusField;
	private String focusFieldSize;
	private EmailComponent emailComponent;
	private TravelParamBean travelParamBean;
	private String countryClassA[]={"Japan","Europe","Russia","USA","UK","Canada"};
	private String countryClassB[]={"North America ex. USA & Canada","South America","Australia","New Zealand","Middle-East/Gulf Countries"};
	private String countryClassC[]={"Singapore","HongKong","Malaysia","Thailand","Phillipines","Indonesia","Vietnam","China","South Korea","Taiwan","North Korea","Pakistan","Bangladesh","Sri Lanka","Maldives","Nepal","Bhutan","Afghanistan","Africa"};
	private String localType="";
	private String localGrade;
	private List<SelectItem> list1;
	private List<SelectItem> list2;
	private List<SelectItem> searchList;
	private List<TravelRequest> travelRequests;
	private List<TravelRequest> employeeTravelRequests;
	private List<TravelRequest> searchResults;
	private List<TravelRequest> employeeSearchResults;
	private int rowIndex;
	private String searchItem;
	private String searchElement;
	private String x;
	private String currentSearchItem;
	private String currentSearchElement;
	private String approvalComment;
	private boolean receivedEmpDetails=false;
	private boolean receivedReqDetailsForSett=false;
	public boolean isFinanceDesk()
	{
		return this.financeDesk;
	}
	public void setApprovalComment(String approvalComment)
	{
		this.approvalComment = approvalComment;
	}
	public String getApprovalComment()
	{
		return this.approvalComment;
	}
	public void setSearchItem(String searchItem)
	{
		this.searchItem = searchItem;
	}
	
	public String getSearchItem()
	{
		return searchItem;
	}
	
	public void setSearchElement(String searchElement)
	{
		this.searchElement = searchElement;
	}
	
	public String getSearchElement()
	{
		return searchElement;
	}
	
	public void setTravelRequests(List<TravelRequest> travelRequests)
	{
		this.travelRequests=travelRequests;
	}
	public int getRowIndex()
	{
		return rowIndex;
	}
	
	public void setRowIndex(int rowIndex)
	{
		this.rowIndex=rowIndex;
	}
	
	public List<SelectItem> getList1() 
	{
		if(travelRequest.getType()!=null)
		{
		localType=travelRequest.getType();
		
		}
		if(list1!=null) 
		{
			list1.clear();
			
		}
		if(localType.equals("international"))
		{
				
				list1 = new ArrayList<SelectItem>();
				for(int i=0;i<countryClassA.length;i++)
					list1.add(new SelectItem(countryClassA[i], countryClassA[i]));
		
				for(int i=0;i<countryClassB.length;i++)
					list1.add(new SelectItem(countryClassB[i], countryClassB[i]));
			
				for(int i=0;i<countryClassC.length;i++)
					list1.add(new SelectItem(countryClassC[i], countryClassC[i]));
				if(travelRequest.getCountry()==null)
				travelRequest.setCountry("Japan");
				
		}
		else
		{
			list1 = new ArrayList<SelectItem>();
			list1.add(new SelectItem("India","India"));
			travelRequest.setCountry("India");
		
		}
		return list1;
		}
	
	public List<SelectItem> getList2() 
	{
		if(list2!=null) 
		{
			list2.clear();
		}
		if(localType.equals("international"))
		{
				list2 = new ArrayList<SelectItem>();
				list2.add(new SelectItem("Air","Air"));
		}
		else
		{
			list2 = new ArrayList<SelectItem>();
			list2.add(new SelectItem("Air","Air"));
			list2.add(new SelectItem("Rail","Rail"));
			list2.add(new SelectItem("Road","Road"));
		}
		return list2;
		}
	
	public List<SelectItem> getSearchList() 
	{
		
			searchList = new ArrayList<SelectItem>();
			searchList.add(new SelectItem("type","Type"));
			searchList.add(new SelectItem("country","Country"));
			//searchList.add(new SelectItem("Road","Road"));
		
		return searchList;
	}

	public TravelProcessor() {
		focusField = "travel";
		focusFieldSize = "0";
	
	}

	public EmployeeDao getEmployeeDao() {
		return employeeDao;
	}
	
	public void setEmployeeDao(EmployeeDao employeeDao) {
		this.employeeDao = employeeDao;
	}
	
	public TravelRequestDao getTravelRequestDao() {
		return travelRequestDao;
	}

	public void setTravelRequestDao(TravelRequestDao travelRequestDao) {
		this.travelRequestDao = travelRequestDao;
	}

	public String getFocusField() {
		return focusField;
	}

	public void setFocusField(String focusField) {
		this.focusField = focusField;
	}

	public String getFocusFieldSize() {
		return focusFieldSize;
	}

	public void setFocusFieldSize(String focusFieldSize) {
		this.focusFieldSize = focusFieldSize;
	}

	public Employee getEmployee() {
		return employee;
	}

	public void setEmployee(Employee employee) {
		this.employee = employee;
	}

	
	public TravelRequest getTravelRequest() {
		return travelRequest;
	}

	public void setTravelRequest(TravelRequest travelRequest) {
		this.travelRequest = travelRequest;
	}
	
	public String errorInvalidReqId() {

		return print();
	}

	public String errorInvalidRole() {
	
		return print();
	}
	
	public char findClass(String country)
	{
		for(int i=0;i<countryClassA.length;i++)
		{
			if(countryClassA[i].equals(country))
			{
				return 'A';
			}
		}
		for(int i=0;i<countryClassB.length;i++)
		{
			if(countryClassB[i].equals(country))
			{
				return 'B';
			}
		}
		for(int i=0;i<countryClassC.length;i++)
		{
			if(countryClassC[i].equals(country))
			{
				return 'C';
			}
		}
		return 'X';
	}
	
	public void processAllowance() {
		String grade=travelRequest.getEmployee().getGrade().trim();
		float dailyAllowance=0;
		if(localType.equals("international"))
		{
			switch(findClass(travelRequest.getCountry().trim()))
			{
				case 'A':	
				if(grade.equals("SM3"))
					dailyAllowance=80;	
				else if(grade.equals("SM2"))
					dailyAllowance=70;
				else if(grade.equals("SM1") || grade.equals("M3")|| grade.equals("M4"))
					dailyAllowance=60;
				else if(grade.equals("M2") || grade.equals("M1"))
					dailyAllowance=50;	
				break;
				
				case 'B':
				if(grade.equals("SM3"))
					dailyAllowance=55;	
				else if(grade.equals("SM2"))
					dailyAllowance=50;
				else if(grade.equals("SM1") || grade.equals("M3")|| grade.equals("M4"))
					dailyAllowance=45;
				else if(grade.equals("M2") || grade.equals("M1"))
					dailyAllowance=40;	
				break;
			
				case 'C':
				if(grade.equals("SM3"))
					dailyAllowance=50;	
				else if(grade.equals("SM2"))
					dailyAllowance=40;
				else if(grade.equals("SM1") || grade.equals("M3")|| grade.equals("M4"))
					dailyAllowance=35;
				else if(grade.equals("M2") || grade.equals("M1"))
					dailyAllowance=30;	
				break;
			}
		}
		
		//domestic
		else
		{
			if(grade.equals("SM3") || grade.equals("SM2") || grade.equals("SM1"))
				dailyAllowance=1000;	
			else if(grade.equals("M3") || grade.equals("M4"))
				dailyAllowance=800;
			else if(grade.equals("M1") || grade.equals("M2"))
				dailyAllowance=600;	
		}
		travelRequest.getTravelDetails().getAllowance().setDailyAllowance(dailyAllowance);
		this.computeDays();
		
	}

	public void enableFields1() {
		localType = travelRequest.getType();
		if(localType!=null && localType.equals("domestic"))
		{
			travelRequest.setDisableCountry(true);
			travelRequest.getTravelDetails().getAllowance().setCurrency("INR");
			//if(travelRequest.getCountry()==null)
			travelRequest.setCountry("India");
		}
		else
		{
			travelRequest.setDisableCountry(false);
			travelRequest.getTravelDetails().getAllowance().setCurrency("$");
			if(travelRequest.getCountry()==null || travelRequest.getCountry().equals("India"))
			travelRequest.setCountry("Japan");
		}
		travelRequest.setDisable1(false);
		if(localGrade!=null)
			determineClass();
		this.enableFields2();
		processAllowance();
		
	}
	
	public void enableFields2(){
		localType = travelRequest.getType();
		localGrade = travelRequest.getEmployee().getGrade();
		
		determineClass();
		processAllowance();
		if(localGrade.equals("Select"))
		{
			travelRequest.setDisable2(true);
			travelRequest.setDisable4(true);
			travelRequest.setDisable5(true);
			
		}
			else
		{
			travelRequest.setDisable2(false);
			int size = travelRequest.getTravelResv().size();
			this.enableFields4(size);
			size = travelRequest.getHotelResv().size();
			this.enableFields5(size);
		}
		
	}
	

	public void enableFields3() {
		if(travelRequest.getPayment().equals("client"))
		{
			travelRequest.removeHotelResvRow();
			this.addHotelResvRow();
			travelRequest.setDisable3(true);
		}
		else
			travelRequest.setDisable3(false);
		this.calculateAmount();
	}
	
	public void enableFields4(int size) {
		if(size!=1)
		travelRequest.setDisable4(false);
		else
			travelRequest.setDisable4(true);
	}
	
	public void enableFields5(int size) {
		if(size!=1)
		travelRequest.setDisable5(false);
		else
			travelRequest.setDisable5(true);
	}
	
	//business or economy
	public void determineClass()
	{	localType=travelRequest.getType();
		localGrade=travelRequest.getEmployee().getGrade();
		if(localType!=null && localType.equals("domestic"))
		{
				Iterator itr = travelRequest.getTravelResv().iterator();
				while (itr.hasNext()) {
					TravelResv resv1 = (TravelResv) itr.next();
					if(localGrade.equals("M1") || localGrade.equals("M2") 
							|| localGrade.equals("M3")|| localGrade.equals("M4") 
							|| localGrade.equals("SM1") || localGrade.equals("SM2") )
					{
						resv1.setClassType("Economy");
					}
					if(localGrade.equals("SM3"))
					{
						resv1.setClassType("Business");
					}
					if(localGrade.equals("Select"))
					{
						resv1.setClassType("");
					}
				}
			}
		if(localType!=null && localType.equals("international"))
		{
				Iterator itr = travelRequest.getTravelResv().iterator();
				while (itr.hasNext()) {
					TravelResv resv1 = (TravelResv) itr.next();
					if(localGrade.equals("M1") || localGrade.equals("M2") 
							|| localGrade.equals("M3")|| localGrade.equals("M4") 
							|| localGrade.equals("SM1"))
					{
						resv1.setClassType("Economy");
					}
					if(localGrade.equals("SM2") || localGrade.equals("SM3"))
					{
						resv1.setClassType("Business");
					}
					if(localGrade.equals("Select"))
					{
						resv1.setClassType("");
					}
				}
			}
		}
	
	private float getDaysBetween (java.util.Calendar d1, java.util.Calendar d2) {
	    if (d1.after(d2)) {  // swap dates so that d1 is start and d2 is end
	        java.util.Calendar swap = d1;
	        d1 = d2;
	        d2 = swap;
	    }
	    float days = d2.get(java.util.Calendar.DAY_OF_YEAR) -
	               d1.get(java.util.Calendar.DAY_OF_YEAR);
	    int y2 = d2.get(java.util.Calendar.YEAR);
	    if (d1.get(java.util.Calendar.YEAR) != y2) {
	        d1 = (java.util.Calendar) d1.clone();
	        do {
	            days += d1.getActualMaximum(java.util.Calendar.DAY_OF_YEAR);
	            d1.add(java.util.Calendar.YEAR, 1);
	        } while (d1.get(java.util.Calendar.YEAR) != y2);
	    }
	    return days;
	}
	
	public void computeDays()
	{
		//long localStartDate=travelRequest.getTravelDetails().getStartDate().getTime();
		//long localEndDate=travelRequest.getTravelDetails().getEndDate().getTime();
		//float diff=(localEndDate-localStartDate)/(1000*24*60*60);
		Calendar cal1=Calendar.getInstance();
	    cal1.setTime(travelRequest.getTravelDetails().getStartDate());
	    Calendar cal2=Calendar.getInstance();
	    cal2.setTime(travelRequest.getTravelDetails().getEndDate());
	    float diff = getDaysBetween (cal1,cal2);
	    if(cal1.get(Calendar.HOUR_OF_DAY)>=12)
	    	diff-=0.5;
	    if(cal2.get(Calendar.HOUR_OF_DAY)<12)
	    	diff-=0.5;
		travelRequest.getTravelDetails().getAllowance().setDays(diff);
		this.calculateAmount();
	}
	
	public void calculateAmount()
	{
		float amount = (float) (
				travelRequest.getTravelDetails().getAllowance()
						.getDailyAllowance() )
				* travelRequest.getTravelDetails().getAllowance().getDays()+travelRequest.getTravelDetails().getAllowance()
				.getAirportTransport()+ travelRequest.getTravelDetails()
				.getAllowance().getConveyance()+travelRequest.getTravelDetails()
				.getAllowance().getOtherAllowance();
		Iterator itr = travelRequest.getTravelResv().iterator();
		itr = travelRequest.getTravelResv().iterator();
		while (itr.hasNext()) {
			TravelResv resv1 = (TravelResv) itr.next();
			amount += resv1.getAmount();
		}

		if (travelRequest.getPayment().equals("company")) {
			itr = travelRequest.getHotelResv().iterator();
			while (itr.hasNext()) {
				HotelResv resv2 = (HotelResv) itr.next();
				amount += resv2.getAmount();
			}
		}
		travelRequest.setAmount(amount);
	}
	
	public void findEmployeeId()
	{
		if(employeeId==0)
		{
		Object obj = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
		String username;
		GrantedAuthority authorities[];
		if ( obj instanceof UserDetails ) 
		{
			username= ( (UserDetails)obj ).getUsername();
			authorities = ( (UserDetails)obj ).getAuthorities();
			for(GrantedAuthority role:authorities)
			{
				if(role.getAuthority().equals("ROLE_SUPERVISOR"))
				{
					financeDesk = true;
				}
			}
		} else {

		    username = obj.toString();
		}
		int id= Integer.valueOf(username);
		
		employeeId = id;
		}
		receivedEmpDetails=false;
	}
	
	public String createTravelRequest() {
		System.out.println("Employee ID :"+employeeId);
		if(!receivedEmpDetails)
		{
			travelRequest=null;		
			travelRequest = new TravelRequest();	
			findEmployeeId();
			employee =employeeDao.findById(employeeId);
			receivedEmpDetails=true;
			if(employee!=null)
			{
				travelRequest.setEmployee(employee);
			
				travelRequest.setDisable1(false);
				
			}
		new FacesElUtils().setValue(FacesContext.getCurrentInstance(), "#{travelRequest}", travelRequest);
			travelRequest.getEmployee().setId(employeeId);
		}
		return "";
	}
	
	
	public String print() {
		if (travelRequest.getDate() == null
				|| travelRequest.getEmployee().getName().trim().equals("")
				|| travelRequest.getEmployee().getUnit().trim().equals("")
				|| travelRequest.getEmployee().getDesignation().trim().equals("")
				|| travelRequest.getEmployee().getEmailId().trim().equals("")
				|| travelRequest.getEmployee().getDepartment().trim().equals("")
				|| travelRequest.getEmployee().getProjectName().trim().equals("")
				|| travelRequest.getEmployee().getMobileNumber().trim().equals("")
				|| travelRequest.getEmployee().getTelephoneExt().trim().equals("")
				|| travelRequest.getTravelDetails().getPurpose().trim().equals("")
				|| travelRequest.getTravelDetails().getStartDate() == null
				|| travelRequest.getTravelDetails().getEndDate() == null
				|| travelRequest.getType().trim().equals("")
				|| travelRequest.getEmployee().getGrade().trim().equals("")
				/*|| travelRequest.getTravelDetails().getAllowance().getDays() == 0
				|| travelRequest.getTravelDetails().getAllowance()
						.getPerDayAllowance() == 0
				|| travelRequest.getTravelDetails().getAllowance()
						.getDailyAllowance() == 0
				|| travelRequest.getTravelDetails().getAllowance()
						.getMiscAllowance() == 0*/) {
			FacesContext.getCurrentInstance().addMessage(
					"travelForm:initiator",
					new FacesMessage("Invalid inputs", "Invalid inputs"));
			return "invalid";
		}
		Iterator itr = travelRequest.getTravelResv().iterator();
	
		while (itr.hasNext()) {
			TravelResv resv1 = (TravelResv) itr.next();
			if (resv1.getTravelDate() == null || resv1.getTravelFrom() == null
					|| resv1.getTravelTo().trim().equals("")
					|| resv1.getModeType().trim().equals("")
					|| resv1.getClassType().trim().equals("")
					|| resv1.getDepTime() == null || resv1.getArrTime() == null
					|| resv1.getAmount() == 0) {
				FacesContext.getCurrentInstance().addMessage(
						"travelForm:initiator",
						new FacesMessage("Invalid travel inputs",
								"Invalid travel inputs"));
				return "invalid";
			}
		}
		if(travelRequest.getPayment().equals("company"))
		{
		itr = travelRequest.getHotelResv().iterator();
	
		while (itr.hasNext()) {
			HotelResv resv2 = (HotelResv) itr.next();
			if (resv2.getPlace() == null || resv2.getCheckIn() == null
					|| resv2.getCheckOut() == null || resv2.getName() == null
					|| resv2.getAmount() == 0) {
				FacesContext.getCurrentInstance().addMessage(
						"travelForm:initiator",
						new FacesMessage("Invalid hotel inputs",
								"Invalid hotel inputs"));
				return "invalid";
			}
		}
		}
	
		travelRequest.setStatus("pending");
		RequestApproval approval = new RequestApproval();
		approval.setApprovorType("finance");
		travelRequest.getRequestApprovals().add(approval);
		this.processAllowance();
		this.calculateAmount();
		
		
		TravelSettlement travelSettlement = new TravelSettlement();
		travelSettlement.setAdvanceTaken(5000);
		travelSettlement.setDifference(2000);
		travelSettlement.setTotlaExpenses(3000);
		travelSettlement.setNoOfDays(8);
		
		List<AdvanceAmount> advanceAmounts = new ArrayList<AdvanceAmount>();
		
		AdvanceAmount advanceAmount = new AdvanceAmount();
		advanceAmount.setBillNo("bill");
		advanceAmount.setConversionRate(45);
		advanceAmount.setCurrency("curr");
		advanceAmount.setForexAmount(55);
		advanceAmount.setINRAmount(12);
		advanceAmount.setRemarks("rem");
		advanceAmount.setType("cash");
		
		advanceAmounts.add(advanceAmount);
		
		List<LodgingExpense> lodgingExpenses = new ArrayList<LodgingExpense>();
		
		LodgingExpense lodgingExpense = new LodgingExpense();
		lodgingExpense.setBillNo("bill");
		lodgingExpense.setConversionRate(45);
		lodgingExpense.setCurrency("curr");
		lodgingExpense.setForexAmount(55);
		lodgingExpense.setINRAmount(12);
		lodgingExpense.setRemarks("rem");
		lodgingExpense.setDetails("lodge");
		
		lodgingExpenses.add(lodgingExpense);
		
		travelSettlement.setAdvanceAmounts(advanceAmounts);
		travelSettlement.setLodgingExpenses(lodgingExpenses);
		
		//travelRequest.setTravelSettlement(travelSettlement);
		
		//travelRequest=travelRequestDao.merge(travelRequest);
		//travelRequestDao.persist(travelRequest);
		
		
		//travelRequest=travelRequestDao.merge(travelRequest);
		
		receivedEmpDetails=false;
		travelRequestDao.persist(travelRequest);
		travelRequest.setControl(true);
		
		// set to null so that a new hibernate query is fired for the employee/finance dashboard
		employeeTravelRequests=null;
		travelRequests=null;
		boolean processSuccess = true;
	
		if (processSuccess) {
			System.out.println("Sending email");
			sendEmailForRequestInitiation();
		}
	
		// Send email
		travelParamBean.setRole("employee");
		return "result";
	}
	public String financeAccept() {
		setFinanceRequestApproval(Boolean.TRUE,this.getApprovalComment());
		travelRequest=travelRequestDao.merge(travelRequest);
		travelRequestDao.persist(travelRequest);
		return "travelSummary";
	}

	public String financeReject() {
		setFinanceRequestApproval(Boolean.FALSE,this.getApprovalComment());
		travelRequest=travelRequestDao.merge(travelRequest);
		travelRequestDao.persist(travelRequest);
		return "travelSummary";
	}

	private void setFinanceRequestApproval(Boolean val,String comment) {
		travelRequest.setShowTravelApproval(false);
		RequestApproval financeApproval = null;
		if (travelRequest.getRequestApprovals() != null) {
			for (RequestApproval approval : travelRequest.getRequestApprovals()) {
				if (approval != null
						&& "finance".equals(approval.getApprovorType())) {
					financeApproval = approval;
				}
			}
			if (financeApproval != null) {
				financeApproval.setApproved(val);
				if(val)
					travelRequest.setStatus("approved");
				else
					travelRequest.setStatus("rejected");
				financeApproval.setProcessed(Boolean.TRUE);
				financeApproval.setComments(comment);
				sendEmailForRequesrApproved(financeApproval);
			}
		}
	}

	private void sendEmailForRequestInitiation() {
		// 1. Send email to employee
		List<String> emailIds = new ArrayList<String>();
		emailIds.add(travelRequest.getEmployee().getEmailId());
		this.emailComponent.sendMails(emailIds, travelRequest
				.getEmailSubjectForEmployeeInitiation(), travelRequest
				.getEmailBodyForEmployeeInitiation());
		// 2. Send email to Travel Desk
		emailIds = new ArrayList<String>();
		emailIds.add(EmailConstants.FINANCE_DESK_EMAIL);
		this.emailComponent.sendMails(emailIds, travelRequest
				.getEmailSubjectForTravelDesk(), travelRequest
				.getEmailBodyForTravelDesk());
	}

	private void sendEmailForRequesrApproved(RequestApproval financeApproval) {
		// 1. Send email to employee
		List<String> emailIds = new ArrayList<String>();
		emailIds.add(travelRequest.getEmployee().getEmailId());
		this.emailComponent.sendMails(emailIds, travelRequest
				.getEmailSubjectForEmployeeTravelDeskApproved(financeApproval
						.getApproved()), travelRequest
				.getEmailBodyForEmployeeTravelDeskApproved(financeApproval
						.getApproved(), financeApproval.getComments())+"\n"+this.getApprovalComment());
	}

	public void submit() {

	}

	public void sendMail() {

	}

	public String sendReqId() {
			this.findEmployeeId();
			travelRequest = travelRequestDao.findById(travelParamBean.getReqId());
			if(!financeDesk)
			{
				System.out.println(travelRequest.getEmployee().getId()+ "\n\n\nequals\n\n"+employeeId);
				
				if(travelRequest!=null && travelRequest.getEmployee().getId()==employeeId)
				{
					new FacesElUtils().setValue(FacesContext.getCurrentInstance(), "#{travelRequest}", travelRequest);
					if(travelRequest.getStatus().equals("rejected"))
					{
						travelRequest.enableAllFields();
						this.enableFields3();
						return "editForm";
					}
					else
					{
						travelRequest.setRenderForm(true);
						return "travelSummary";
					}
				}
				else
				{
					//we should have redirected to an Access Denied because the summary does not belong to the employee request
					//travelRequest.setRenderForm(true);
					return "accessDenied";
				}
			}
			else
			{
				if(travelRequest!=null)
				{
					new FacesElUtils().setValue(FacesContext.getCurrentInstance(), "#{travelRequest}", travelRequest);
					return "travelSummary";
				}
				else
					return "notExist";
			}
		
	}
	public List<TravelRequest> getEmployeeTravelRequests() {
		if(employeeTravelRequests==null)
		{
			employeeTravelRequests= new ArrayList<TravelRequest>();
			employeeTravelRequests= travelRequestDao.findbyEmployeeId(employeeId);
		}
			System.out.println("travelRrquests is null");
		return employeeTravelRequests;
	}
	
	public List<TravelRequest> getTravelRequests() {
		if(travelRequests==null)
		{
			travelRequests= new ArrayList<TravelRequest>();
			travelRequests= travelRequestDao.findIt();
		}
			System.out.println("travelRrquests is null");
		return travelRequests;
}
	
	public List<TravelRequest> getSearchResults() {
		if(this.getSearchItem()!=null)
			x=this.getSearchItem();
		else if(x==null)
			x="type";
	
		if(currentSearchItem!=x || currentSearchElement!=searchElement)
			searchResults= travelRequestDao.findElement(x,searchElement);
		currentSearchItem=x;
		currentSearchElement=searchElement;
		return searchResults;
}
	public List<TravelRequest> getEmployeeSearchResults() {
		if(this.getSearchItem()!=null)
			x=this.getSearchItem();
		else if(x==null)
			x="type";
	
		if(currentSearchItem!=x || currentSearchElement!=searchElement)
			//we could have used a hibernate call here instead of creating a new method
			employeeSearchResults= travelRequestDao.findElementforEmp(x,searchElement,employeeId);
		currentSearchItem=x;
		currentSearchElement=searchElement;
		return employeeSearchResults;
}
	public String displaySummary() {
	
		travelRequest = travelRequestDao.findById(travelParamBean.getReqId());
		new FacesElUtils().setValue(FacesContext.getCurrentInstance(), "#{travelRequest}", travelRequest);
		return "travelSummary";
}
	public String showTravelSummary() {
		
		travelParamBean.setReqId(travelRequests.get(rowIndex).getId());
		travelParamBean.setRole("finance");
		return this.sendReqId();
	}
	public String showTravelSummary2() {

		travelParamBean.setReqId(searchResults.get(rowIndex).getId());
		travelParamBean.setRole("finance");
		return this.sendReqId();
	}
	public String showEmployeeTravelSummary() {
		
		travelParamBean.setReqId(employeeTravelRequests.get(rowIndex).getId());
		travelParamBean.setRole("employee");
		;
		return this.sendReqId();
	}
	public String showEmployeeTravelSummary2() {
		
		travelParamBean.setReqId(employeeSearchResults.get(rowIndex).getId());
		travelParamBean.setRole("employee");
	
		return this.sendReqId();
	}
	
	public void addTravelResvRow() {
		travelRequest.addTravelResvRow();
		focusField = "travel";
		int size = travelRequest.getTravelResv().size() - 1;
		focusFieldSize = "" + size;
		determineClass();
		this.enableFields4(size+1);
	}
	
	public void removeTravelResvRow() {
		int size = travelRequest.getTravelResv().size();
		
		if(size>1)
			travelRequest.getTravelResv().remove(rowIndex);
		size = travelRequest.getTravelResv().size();
		this.enableFields4(size);
		this.calculateAmount();
	}
	

	public void addHotelResvRow() {

		travelRequest.addHotelResvRow();
		focusField = "hotel";
		int size = travelRequest.getHotelResv().size() - 1;
		focusFieldSize = "" + size;
		this.enableFields5(size+1);
	}
	
	public void removeHotelResvRow() {
		int size = travelRequest.getHotelResv().size();
	
		if(size>1)
			travelRequest.getHotelResv().remove(rowIndex);
		size = travelRequest.getHotelResv().size();
		this.enableFields5(size);
		this.calculateAmount();
	}
	
	public EmailComponent getEmailComponent() {
		return emailComponent;
	}

	public void setEmailComponent(EmailComponent emailComponent) {
		this.emailComponent = emailComponent;
	}

	public TravelParamBean getTravelParamBean() {
		return travelParamBean;
	}

	public void setTravelParamBean(TravelParamBean travelParamBean) {
		this.travelParamBean = travelParamBean;
	}

	
	
	/***********************************************************/
	
/********************---travel settlement starts from here---********************/
/*	
	//adding rows
	public void addAdvanceTableRow() {
		travelRequest.getTravelSettlement().addAdvanceTableRow();
		int size = travelRequest.getTravelSettlement().getAdvanceAmounts().size();
		disableAdvanceTableRowDelete(size);
	}
	
	public void addLodgingTableRow() {
		travelRequest.getTravelSettlement().addLodgingTableRow();
		int size = travelRequest.getTravelSettlement().getLodgingExpenses().size();
		disableLodgingTableRowDelete(size);
	}
	
	public void addConveyanceTableRow() {
		travelRequest.getTravelSettlement().addConveyanceTableRow();
		int size = travelRequest.getTravelSettlement().getConveyanceExpenses().size();
		disableConveyanceTableRowDelete(size);
	}
	
	public void addOthersTableRow() {
		travelRequest.getTravelSettlement().addOthersTableRow();
		int size = travelRequest.getTravelSettlement().getOthersExpenses().size();
		disableOthersTableRowDelete(size);
	}
	
	public void addEntertainmentTableRow() {
		travelRequest.getTravelSettlement().addEntertainmentTableRow();	
		int size = travelRequest.getTravelSettlement().getEntertainmentExpenses().size();
		disableEntertainmentTableRowDelete(size);
	}
	
	public void addMiscellaneousTableRow() {
		travelRequest.getTravelSettlement().addMiscellaneousTableRow();
		int size = travelRequest.getTravelSettlement().getMiscellaneousExpenses().size();
		disableMiscellaneousTableRowDelete(size);
	}
	
	
	//deleting rows
	
	public void removeAdvanceTableRow() {
		int size = travelRequest.getTravelSettlement().getAdvanceAmounts().size();	
		if(size>1){
			travelRequest.getTravelSettlement().getAdvanceAmounts().remove(rowIndex);
			disableAdvanceTableRowDelete(size-1);
			this.calculateTotalAdvance();
			//this.calculateTotalAdvanceINR();
		}
	}
	
	public void removeLodgingTableRow() {
		int size = travelRequest.getTravelSettlement().getLodgingExpenses().size();
		if(size>1){
			travelRequest.getTravelSettlement().getLodgingExpenses().remove(rowIndex);
			disableLodgingTableRowDelete(size-1);
			this.calculateTotalLodging();
		//	this.calculateTotalLodgingINR();
		}
	}
	
	public void removeConveyanceTableRow() {
		int size = travelRequest.getTravelSettlement().getConveyanceExpenses().size();
		if(size>1){
			travelRequest.getTravelSettlement().getConveyanceExpenses().remove(rowIndex);
			disableConveyanceTableRowDelete(size-1);
			this.calculateTotalConveyance();
		//	this.calculateTotalConveyanceINR();
		}
	}
	
	public void removeOthersTableRow() {
		int size = travelRequest.getTravelSettlement().getOthersExpenses().size();
		if(size>1){
			travelRequest.getTravelSettlement().getOthersExpenses().remove(rowIndex);
			disableOthersTableRowDelete(size-1);
			this.calculateTotalOthers();
		//	this.calculateTotalOthersINR();
		}
	}
	
	public void removeEntertainmentTableRow() {
		int size = travelRequest.getTravelSettlement().getEntertainmentExpenses().size();
		if(size>1){
			travelRequest.getTravelSettlement().getEntertainmentExpenses().remove(rowIndex);
			disableEntertainmentTableRowDelete(size-1);
			this.calculateTotalEntertainment();
			//this.calculateTotalEntertainmentINR();
		}
	}
	
	public void removeMiscellaneousTableRow() {
		int size = travelRequest.getTravelSettlement().getMiscellaneousExpenses().size();
		if(size>1){
			travelRequest.getTravelSettlement().getMiscellaneousExpenses().remove(rowIndex);
			disableMiscellaneousTableRowDelete(size-1);
			this.calculateTotalMiscellaneous();
		//	this.calculateTotalMiscellaneousINR();
		}
	}
	
	
	//disabling delete row option
	
	
	public void disableAdvanceTableRowDelete(int size) {
		if(size!=1)
		travelRequest.getTravelSettlement().setDisableAdvanceTableRowDelete(false);
		else
			travelRequest.getTravelSettlement().setDisableAdvanceTableRowDelete(true);
	}
	
	public void disableLodgingTableRowDelete(int size) {
		if(size!=1)
		travelRequest.getTravelSettlement().setDisableLodgingTableRowDelete(false);
		else
			travelRequest.getTravelSettlement().setDisableLodgingTableRowDelete(true);
	}
	
	public void disableConveyanceTableRowDelete(int size) {
		if(size!=1)
		travelRequest.getTravelSettlement().setDisableConveyanceTableRowDelete(false);
		else
			travelRequest.getTravelSettlement().setDisableConveyanceTableRowDelete(true);
	}
	
	public void disableOthersTableRowDelete(int size) {
		if(size!=1)
		travelRequest.getTravelSettlement().setDisableOthersTableRowDelete(false);
		else
			travelRequest.getTravelSettlement().setDisableOthersTableRowDelete(true);
	}
	
	public void disableEntertainmentTableRowDelete(int size) {
		if(size!=1)
		travelRequest.getTravelSettlement().setDisableEntertainmentTableRowDelete(false);
		else
			travelRequest.getTravelSettlement().setDisableEntertainmentTableRowDelete(true);
	}
	
	public void disableMiscellaneousTableRowDelete(int size) {
		if(size!=1)
		travelRequest.getTravelSettlement().setDisableMiscellaneousTableRowDelete(false);
		else
			travelRequest.getTravelSettlement().setDisableMiscellaneousTableRowDelete(true);
	}
	
	//calculating sum
	
	
	public void calculateTotalAdvance()
	{
		float amount=0;
		float amountINR=0;
		Iterator itr = travelRequest.getTravelSettlement().getAdvanceAmounts().iterator();
		while (itr.hasNext()) {
			AdvanceAmount advance = (AdvanceAmount) itr.next();
			advance.setINRAmount(advance.getForexAmount()*advance.getConversionRate());
			System.out.println("INR amount "+advance.getINRAmount());
			amount += advance.getForexAmount();
			amountINR +=advance.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalAdvanceAmount(amount);
		travelRequest.getTravelSettlement().setAdvanceTaken(amountINR);
		System.out.println("advance taken"+travelRequest.getTravelSettlement().getAdvanceTaken());
		calculateTotalFinalDifferenceINR();
	}
	
/*	public void calculateTotalAdvanceINR()
	{
		float amount=0;
		Iterator itr = travelRequest.getTravelSettlement().getAdvanceAmounts().iterator();
		while (itr.hasNext()) {
			AdvanceAmount advance = (AdvanceAmount) itr.next();
			amount += advance.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalAdvanceAmountINR(amount);
		calculateTotalFinalDifferenceINR();
	}
	
	public void calculateTotalLodging()
	{
		float amount=0;
		float amountINR=0;
		Iterator itr = travelRequest.getTravelSettlement().getLodgingExpenses().iterator();
		while (itr.hasNext()) {
			Expense lodging = (Expense) itr.next();
			lodging.setINRAmount(lodging.getForexAmount()*lodging.getConversionRate());
			amount += lodging.getForexAmount();
			amountINR += lodging.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalLodgingExpenses(amount);
		travelRequest.getTravelSettlement().setTotalLodgingExpensesINR(amountINR);
		calculateTotalOfAllExpenses();
		calculateTotalOfAllExpensesINR();
	}
	
	/*public void calculateTotalLodgingINR()
	{
		float amount=0;
		Iterator itr = travelRequest.getTravelSettlement().getLodgingExpenses().iterator();
		while (itr.hasNext()) {
			LodgingExpense lodging = (LodgingExpense) itr.next();
			amount += lodging.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalLodgingExpensesINR(amount);
		calculateTotalOfAllExpensesINR();
	}
	
	public void calculateTotalTravelling()
	{
		float amount=0;
		float amountINR=0;
		Iterator itr = travelRequest.getTravelSettlement().getTravelingDailyAllowanceExpenses().iterator();
		while (itr.hasNext()) {
			Expense travelling = (Expense) itr.next();
			travelling.setINRAmount(travelling.getForexAmount()*travelling.getConversionRate());
			amount += travelling.getForexAmount();
			amountINR += travelling.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalTravellingExpenses(amount);
		travelRequest.getTravelSettlement().setTotalTravellingExpensesINR(amountINR);
		calculateTotalOfAllExpenses();
		calculateTotalOfAllExpensesINR();
	}
	
	/*public void calculateTotalTravellingINR()
	{
		float amount=0;
		Iterator itr = travelRequest.getTravelSettlement().getTravelingDailyAllowanceExpenses().iterator();
		while (itr.hasNext()) {
			TravelingDailyAllowanceExpense travelling = (TravelingDailyAllowanceExpense) itr.next();
			amount += travelling.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalTravellingExpensesINR(amount);
		calculateTotalOfAllExpensesINR();
	}
	
	public void calculateTotalConveyance()
	{
		float amount=0;
		float amountINR=0;
		Iterator itr = travelRequest.getTravelSettlement().getConveyanceExpenses().iterator();
		while (itr.hasNext()) {
			Expense conveyance = (Expense) itr.next();
			conveyance.setINRAmount(conveyance.getForexAmount()*conveyance.getConversionRate());
			amount += conveyance.getForexAmount();
			amountINR += conveyance.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalConveyanceExpenses(amount);
		travelRequest.getTravelSettlement().setTotalConveyanceExpensesINR(amountINR);
		calculateTotalOfAllExpenses();
		calculateTotalOfAllExpensesINR();
	}
	
	/*public void calculateTotalConveyanceINR()
	{
		float amount=0;
		Iterator itr = travelRequest.getTravelSettlement().getConveyanceExpenses().iterator();
		while (itr.hasNext()) {
			ConveyanceExpense conveyance = (ConveyanceExpense) itr.next();
			amount += conveyance.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalConveyanceExpensesINR(amount);
		calculateTotalOfAllExpensesINR();
	}
	
	public void calculateTotalOthers()
	{
		float amount=0;
		float amountINR=0;
		Iterator itr = travelRequest.getTravelSettlement().getOthersExpenses().iterator();
		while (itr.hasNext()) {
			Expense others = (Expense) itr.next();
			others.setINRAmount(others.getForexAmount()*others.getConversionRate());
			amount += others.getForexAmount();
			amountINR += others.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalOtherExpenses(amount);
		travelRequest.getTravelSettlement().setTotalOtherExpensesINR(amountINR);
		calculateTotalOfAllExpenses();
		calculateTotalOfAllExpensesINR();
	}
	
	/*public void calculateTotalOthersINR()
	{
		float amount=0;
		Iterator itr = travelRequest.getTravelSettlement().getOthersExpenses().iterator();
		while (itr.hasNext()) {
			OthersExpense others = (OthersExpense) itr.next();
			amount += others.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalOtherExpensesINR(amount);
		calculateTotalOfAllExpensesINR();
	}
	
	public void calculateTotalEntertainment()
	{
		float amount=0;
		float amountINR=0;
		Iterator itr = travelRequest.getTravelSettlement().getEntertainmentExpenses().iterator();
		while (itr.hasNext()) {
			Expense entertainment = (Expense) itr.next();
			entertainment.setINRAmount(entertainment.getForexAmount()*entertainment.getConversionRate());
			amount += entertainment.getForexAmount();
			amountINR += entertainment.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalEntertainmentExpenses(amount);
		travelRequest.getTravelSettlement().setTotalEntertainmentExpensesINR(amountINR);
		calculateTotalOfAllExpenses();
		calculateTotalOfAllExpensesINR();
	}
	
	/*public void calculateTotalEntertainmentINR()
	{
		float amount=0;
		Iterator itr = travelRequest.getTravelSettlement().getEntertainmentExpenses().iterator();
		while (itr.hasNext()) {
			EntertainmentExpense entertainment = (EntertainmentExpense) itr.next();
			amount += entertainment.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalEntertainmentExpensesINR(amount);
		calculateTotalOfAllExpensesINR();
	}
	
	public void calculateTotalMiscellaneous()
	{
		float amount=0;
		float amountINR=0;
		Iterator itr = travelRequest.getTravelSettlement().getMiscellaneousExpenses().iterator();
		while (itr.hasNext()) {
			Expense miscellaneous = (Expense) itr.next();
			miscellaneous.setINRAmount(miscellaneous.getForexAmount()*miscellaneous.getConversionRate());
			amount += miscellaneous.getForexAmount();
			amountINR += miscellaneous.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalMiscellaneousExpenses(amount);
		travelRequest.getTravelSettlement().setTotalMiscellaneousExpensesINR(amountINR);
		calculateTotalOfAllExpenses();
		calculateTotalOfAllExpensesINR();
	}
	
	/*public void calculateTotalMiscellaneousINR()
	{
		float amount=0;
		Iterator itr = travelRequest.getTravelSettlement().getMiscellaneousExpenses().iterator();
		while (itr.hasNext()) {
			MiscellaneousExpense miscellaneous = (MiscellaneousExpense) itr.next();
			amount += miscellaneous.getINRAmount();
		}
		travelRequest.getTravelSettlement().setTotalMiscellaneousExpensesINR(amount);
		calculateTotalOfAllExpensesINR();
	}*/
	
	/*private void calculateTotalOfAllExpenses()
	{
		float totalAmount=travelRequest.getTravelSettlement().getTotalLodgingExpenses()+travelRequest.getTravelSettlement().getTotalTravellingExpenses()+travelRequest.getTravelSettlement().getTotalConveyanceExpenses()+travelRequest.getTravelSettlement().getTotalOtherExpenses()+travelRequest.getTravelSettlement().getTotalEntertainmentExpenses()+travelRequest.getTravelSettlement().getTotalMiscellaneousExpenses();
		travelRequest.getTravelSettlement().setTotalOfAllExpenses(totalAmount);
		calculateTotalFinalDifferenceINR();
	}
	
	private void calculateTotalOfAllExpensesINR()
	{
		float totalAmount=travelRequest.getTravelSettlement().getTotalLodgingExpensesINR()+travelRequest.getTravelSettlement().getTotalTravellingExpensesINR()+travelRequest.getTravelSettlement().getTotalConveyanceExpensesINR()+travelRequest.getTravelSettlement().getTotalOtherExpensesINR()+travelRequest.getTravelSettlement().getTotalEntertainmentExpensesINR()+travelRequest.getTravelSettlement().getTotalMiscellaneousExpensesINR();
		travelRequest.getTravelSettlement().setTotlaExpenses(totalAmount);
		calculateTotalFinalDifferenceINR();
	}
	
	private void calculateTotalFinalDifferenceINR()
	{
		float difference = travelRequest.getTravelSettlement().getAdvanceTaken()-travelRequest.getTravelSettlement().getTotlaExpenses();
		travelRequest.getTravelSettlement().setDifference(difference);
	}
	
	public void printForTravelSettlement()
	{
		
		System.out.println("inside travel settlement print "
				+ travelRequest.getTravelSettlement().getAdvanceTaken()
				+ " "
				+ travelRequest.getTravelSettlement().getDifference()
				+ " "
				+ travelRequest.getTravelSettlement().getNoOfDays()
				+ " "
				+ travelRequest.getTravelSettlement().getTotlaExpenses()
				+ " "
				+ travelRequest.getTravelSettlement().getId()
				+ " "
				+ travelRequest.getTravelSettlement().getArrivalDate());
		
	}
	
	public void computeDaysForSettlement()
	{
		//long localStartDate=travelRequest.getTravelDetails().getStartDate().getTime();
		//long localEndDate=travelRequest.getTravelDetails().getEndDate().getTime();
		//float diff=(localEndDate-localStartDate)/(1000*24*60*60);
		Calendar cal1=Calendar.getInstance();
	    cal1.setTime(travelRequest.getTravelSettlement().getDepartureDate());
	    cal1.add(Calendar.HOUR, -1);
	    Calendar cal2=Calendar.getInstance();
	    cal2.setTime(travelRequest.getTravelSettlement().getArrivalDate());
	    int diff = (int)getDaysBetween (cal1,cal2);	
	    if(cal1.get(Calendar.HOUR_OF_DAY)>=12)
	    	diff-=0.5;
	    if(cal2.get(Calendar.HOUR_OF_DAY)<12)
	    	diff-=0.5;
		travelRequest.getTravelSettlement().setNoOfDays(diff);		
	}
	
	public String sendReqIdForSettlement() {
		if(!receivedReqDetailsForSett)
		{
			receivedReqDetailsForSett=true;
			this.findEmployeeId();
			travelRequest = travelRequestDao.findById(travelParamBean.getReqId());
			if(travelRequest!=null)
			{
				new FacesElUtils().setValue(FacesContext.getCurrentInstance(), "#{travelRequest}", travelRequest);
				travelRequest.getTravelSettlement().setArrivalDate(travelRequest.getTravelDetails().getEndDate());
				travelRequest.getTravelSettlement().setDepartureDate(travelRequest.getTravelDetails().getStartDate());
				this.computeDaysForSettlement();
				return "travelSettlement";
			}
			else
			{
				//we should have redirected to an Access Denied
				return "invalid";
			}		
		}
		return null;
	}*/
}
	

