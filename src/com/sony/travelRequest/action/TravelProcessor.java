//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : TravelProcessor.java
//  @ Date : 09-04-2010
//  @ Author : 
//
//

package com.sony.travelRequest.action;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

import javax.faces.application.FacesMessage;
import javax.faces.context.FacesContext;
import javax.faces.event.AbortProcessingException;
import javax.faces.event.ActionEvent;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;

import org.hibernate.criterion.DetachedCriteria;
import org.hibernate.criterion.Order;
import org.springframework.context.support.GenericApplicationContext;
import org.springframework.web.context.support.GenericWebApplicationContext;
import org.springframework.web.jsf.FacesContextUtils;

import com.ocpsoft.pretty.util.FacesElUtils;
import com.sony.travelRequest.dao.TravelRequestDao;
import com.sony.travelRequest.model.Allowance;
import com.sony.travelRequest.model.EmailConstants;
import com.sony.travelRequest.model.HotelResv;
import com.sony.travelRequest.model.RequestApproval;
import com.sony.travelRequest.model.TravelDetails;
import com.sony.travelRequest.model.TravelParamBean;
import com.sony.travelRequest.model.TravelRequest;
import com.sony.travelRequest.model.TravelResv;
import com.sony.travelRequest.util.EmailComponent;

public class TravelProcessor {

	private TravelRequest travelRequest;
	private TravelRequestDao travelRequestDao;
	private String focusField;
	private String focusFieldSize;
	private EmailComponent emailComponent;
	private TravelParamBean travelParamBean;
	private String countryClassA[]={"Japan","Europe","Russia","USA","UK","Canada"};
	private String countryClassB[]={"North America ex. USA & Canada","South America","Australia","New Zealand","Middle-East/Gulf Countries"};
	private String countryClassC[]={"Singapore","HongKong","Malaysia","Thailand","Phillipines","Indonesia","Vietnam","China","South Korea","Taiwan","North Korea","Pakistan","Bangladesh","Sri Lanka","Maldives","Nepal","Bhutan","Afghanistan","Africa"};
	private static String localType="";
	private static String localGrade;
	private static List<SelectItem> list1;
	private static List<SelectItem> list2;
	private static List<SelectItem> searchList;
	private List<TravelRequest> travelRequests;
	private List<TravelRequest> searchResults;
	private static long localStartDate;
	private static long localEndDate;
	private static float dailyAllowance;
	private int rowIndex;
	private static int startPage;
	private String searchItem;
	private String searchElement;
	private static String x;
	private static String currentSearchItem;
	private static String currentSearchElement;
	
	public void setSearchItem(String searchItem)
	{
		this.searchItem = searchItem;
	}
	
	public String getSearchItem()
	{
		return searchItem;
	}
	
	public void setSearchElement(String searchElement)
	{
		this.searchElement = searchElement;
	}
	
	public String getSearchElement()
	{
		return searchElement;
	}
	
	public void setTravelRequests(List<TravelRequest> travelRequests)
	{
		this.travelRequests=travelRequests;
	}
	public int getRowIndex()
	{
		return rowIndex;
	}
	public void setRowIndex(int rowIndex)
	{
		this.rowIndex=rowIndex;
	}
	public List<SelectItem> getList1() 
	{
		if(travelRequest.getType()!=null)
		localType=travelRequest.getType();
		if(list1!=null) 
		{
			list1.clear();
		}
		if(localType.equals("international"))
		{
				
				list1 = new ArrayList<SelectItem>();
				for(int i=0;i<countryClassA.length;i++)
					list1.add(new SelectItem(countryClassA[i], countryClassA[i]));
		
				for(int i=0;i<countryClassB.length;i++)
					list1.add(new SelectItem(countryClassB[i], countryClassB[i]));
			
				for(int i=0;i<countryClassC.length;i++)
					list1.add(new SelectItem(countryClassC[i], countryClassC[i]));
				if(travelRequest.getCountry()==null)
				travelRequest.setCountry("Japan");
		}
		else
		{
			list1 = new ArrayList<SelectItem>();
			list1.add(new SelectItem("India","India"));
			travelRequest.setCountry("India");
		}
		return list1;
		}
	
	public List<SelectItem> getList2() 
	{
		if(list2!=null) 
		{
			list2.clear();
		}
		if(localType.equals("international"))
		{
				list2 = new ArrayList<SelectItem>();
				list2.add(new SelectItem("Air","Air"));
		}
		else
		{
			list2 = new ArrayList<SelectItem>();
			list2.add(new SelectItem("Air","Air"));
			list2.add(new SelectItem("Rail","Rail"));
			list2.add(new SelectItem("Road","Road"));
		}
		return list2;
		}
	
	public List<SelectItem> getSearchList() 
	{
		
			searchList = new ArrayList<SelectItem>();
			searchList.add(new SelectItem("type","Type"));
			searchList.add(new SelectItem("country","Country"));
			//searchList.add(new SelectItem("Road","Road"));
		
		return searchList;
	}

	public TravelProcessor() {
		focusField = "travel";
		focusFieldSize = "0";
		System.out.println("\n\nYo\n\n\n");
	}

	public TravelRequestDao getTravelRequestDao() {
		return travelRequestDao;
	}

	public void setTravelRequestDao(TravelRequestDao travelRequestDao) {
		this.travelRequestDao = travelRequestDao;
	}

	public String getFocusField() {
		return focusField;
	}

	public void setFocusField(String focusField) {
		this.focusField = focusField;
	}

	public String getFocusFieldSize() {
		return focusFieldSize;
	}

	public void setFocusFieldSize(String focusFieldSize) {
		this.focusFieldSize = focusFieldSize;
	}

	public TravelRequest getTravelRequest() {
		return travelRequest;
	}

	public void setTravelRequest(TravelRequest travelRequest) {
		this.travelRequest = travelRequest;
	}
	
	public String errorInvalidReqId() {
		System.out.println("Invalid request Id");
		return print();
	}

	public String errorInvalidRole() {
		System.out.println("Invalid role Id");
		return print();
	}
	
	public char findClass(String country)
	{
		for(int i=0;i<countryClassA.length;i++)
		{
			if(countryClassA[i].equals(country))
			{
				return 'A';
			}
		}
		for(int i=0;i<countryClassB.length;i++)
		{
			if(countryClassB[i].equals(country))
			{
				return 'B';
			}
		}
		for(int i=0;i<countryClassC.length;i++)
		{
			if(countryClassC[i].equals(country))
			{
				return 'C';
			}
		}
		return 'X';
	}
	
	public void processAllowance() {
		String grade=travelRequest.getEmployee().getGrade().trim();
		System.out.println(grade+" "+localType+" "+travelRequest.getCountry());
		if(localType.equals("international"))
		{
			switch(findClass(travelRequest.getCountry().trim()))
			{
				case 'A':	
				if(grade.equals("SM3"))
					dailyAllowance=80;	
				else if(grade.equals("SM2"))
					dailyAllowance=70;
				else if(grade.equals("SM1") || grade.equals("M3")|| grade.equals("M4"))
					dailyAllowance=60;
				else if(grade.equals("M2") || grade.equals("M1"))
					dailyAllowance=50;	
				break;
				
				case 'B':
				if(grade.equals("SM3"))
					dailyAllowance=55;	
				else if(grade.equals("SM2"))
					dailyAllowance=50;
				else if(grade.equals("SM1") || grade.equals("M3")|| grade.equals("M4"))
					dailyAllowance=45;
				else if(grade.equals("M2") || grade.equals("M1"))
					dailyAllowance=40;	
				break;
			
				case 'C':
				if(grade.equals("SM3"))
					dailyAllowance=50;	
				else if(grade.equals("SM2"))
					dailyAllowance=40;
				else if(grade.equals("SM1") || grade.equals("M3")|| grade.equals("M4"))
					dailyAllowance=35;
				else if(grade.equals("M2") || grade.equals("M1"))
					dailyAllowance=30;	
				break;
			}
		}
		
		//domestic
		else
		{
			if(grade.equals("SM3") || grade.equals("SM2") || grade.equals("SM1"))
				dailyAllowance=1000;	
			else if(grade.equals("M3") || grade.equals("M4"))
				dailyAllowance=800;
			else if(grade.equals("M1") || grade.equals("M2"))
				dailyAllowance=600;	
		}
		travelRequest.getTravelDetails().getAllowance().setDailyAllowance(dailyAllowance);
		this.calculateAmount();
		
	}

	public void enableFields1() {
		localType = travelRequest.getType();
		if(localType.equals("domestic"))
		{
			travelRequest.setDisableCountry(true);
			travelRequest.getTravelDetails().getAllowance().setCurrency("INR");
			if(travelRequest.getCountry()==null)
			travelRequest.setCountry("India");
		}
		else
		{
			travelRequest.setDisableCountry(false);
			travelRequest.getTravelDetails().getAllowance().setCurrency("$");
			if(travelRequest.getCountry()==null)
			travelRequest.setCountry("Japan");
		}
		travelRequest.setDisable1(false);
		if(localGrade!=null)
			determineClass();
		processAllowance();
	}
	
	public void enableFields2(){
		localType = travelRequest.getType();
		localGrade = travelRequest.getEmployee().getGrade();
		determineClass();
		processAllowance();
		if(localGrade.equals("Select"))
		{
			travelRequest.setDisable2(true);
			travelRequest.setDisable4(true);
			travelRequest.setDisable5(true);
			
		}
			else
		{
			travelRequest.setDisable2(false);
			int size = travelRequest.getTravelResv().size();
			this.enableFields4(size);
			size = travelRequest.getHotelResv().size();
			this.enableFields5(size);
		}
	}
	

	public void enableFields3() {
		if(travelRequest.getPayment().equals("client"))
		{
			travelRequest.removeHotelResvRow();
			this.addHotelResvRow();
			travelRequest.setDisable3(true);
		}
		else
			travelRequest.setDisable3(false);
		this.calculateAmount();
	}
	
	public void enableFields4(int size) {
		if(size!=1)
		travelRequest.setDisable4(false);
		else
			travelRequest.setDisable4(true);
	}
	
	public void enableFields5(int size) {
		if(size!=1)
		travelRequest.setDisable5(false);
		else
			travelRequest.setDisable5(true);
	}
	
	//business or economy
	public void determineClass()
	{	localType=travelRequest.getType();
		localGrade=travelRequest.getEmployee().getGrade();
		if(localType.equals("domestic"))
		{
				Iterator itr = travelRequest.getTravelResv().iterator();
				while (itr.hasNext()) {
					TravelResv resv1 = (TravelResv) itr.next();
					if(localGrade.equals("M1") || localGrade.equals("M2") 
							|| localGrade.equals("M3")|| localGrade.equals("M4") 
							|| localGrade.equals("SM1") || localGrade.equals("SM2") )
					{
						resv1.setClassType("Economy");
					}
					if(localGrade.equals("SM3"))
					{
						resv1.setClassType("Business");
					}
					if(localGrade.equals("Select"))
					{
						resv1.setClassType("");
					}
				}
			}
		if(localType.equals("international"))
		{
				Iterator itr = travelRequest.getTravelResv().iterator();
				while (itr.hasNext()) {
					TravelResv resv1 = (TravelResv) itr.next();
					if(localGrade.equals("M1") || localGrade.equals("M2") 
							|| localGrade.equals("M3")|| localGrade.equals("M4") 
							|| localGrade.equals("SM1"))
					{
						resv1.setClassType("Economy");
					}
					if(localGrade.equals("SM2") || localGrade.equals("SM3"))
					{
						resv1.setClassType("Business");
					}
					if(localGrade.equals("Select"))
					{
						resv1.setClassType("");
					}
				}
			}
		}
	
	
	public void computeDays()
	{
		localStartDate=travelRequest.getTravelDetails().getStartDate().getTime();
		localEndDate=travelRequest.getTravelDetails().getEndDate().getTime();
		float diff = (localEndDate-localStartDate)/(1000*24*3600);
		travelRequest.getTravelDetails().getAllowance().setDays(diff);
		this.calculateAmount();
		//System.out.println(travelRequest.getTravelDetails().getAllowance().getDays());
	}
	
	public void calculateAmount()
	{
		float amount = (float) (
				travelRequest.getTravelDetails().getAllowance()
						.getDailyAllowance() )
				* travelRequest.getTravelDetails().getAllowance().getDays()+travelRequest.getTravelDetails().getAllowance()
				.getAirportTransport()+ travelRequest.getTravelDetails()
				.getAllowance().getConveyance()+travelRequest.getTravelDetails()
				.getAllowance().getOtherAllowance();
		Iterator itr = travelRequest.getTravelResv().iterator();
		itr = travelRequest.getTravelResv().iterator();
		while (itr.hasNext()) {
			TravelResv resv1 = (TravelResv) itr.next();
			amount += resv1.getAmount();
		}

		if (travelRequest.getPayment().equals("company")) {
			itr = travelRequest.getHotelResv().iterator();
			while (itr.hasNext()) {
				HotelResv resv2 = (HotelResv) itr.next();
				amount += resv2.getAmount();
			}
		}
		travelRequest.setAmount(amount);
	}
	
	
	
	
	public String print() {
		System.out.println("In waeqwe");
		if (travelRequest.getDate() == null
				|| travelRequest.getEmployee().getName().trim().equals("")
				|| travelRequest.getEmployee().getUnit().trim().equals("")
				|| travelRequest.getEmployee().getDesignation().trim().equals("")
				|| travelRequest.getEmployee().getEmailId().trim().equals("")
				|| travelRequest.getEmployee().getDepartment().trim().equals("")
				|| travelRequest.getEmployee().getProjectName().trim().equals("")
				|| travelRequest.getEmployee().getMobileNumber().trim().equals("")
				|| travelRequest.getEmployee().getTelephoneExt().trim().equals("")
				|| travelRequest.getTravelDetails().getPurpose().trim().equals("")
				|| travelRequest.getTravelDetails().getStartDate() == null
				|| travelRequest.getTravelDetails().getEndDate() == null
				|| travelRequest.getType().trim().equals("")
				|| travelRequest.getEmployee().getGrade().trim().equals("")
				/*|| travelRequest.getTravelDetails().getAllowance().getDays() == 0
				|| travelRequest.getTravelDetails().getAllowance()
						.getPerDayAllowance() == 0
				|| travelRequest.getTravelDetails().getAllowance()
						.getDailyAllowance() == 0
				|| travelRequest.getTravelDetails().getAllowance()
						.getMiscAllowance() == 0*/) {
			FacesContext.getCurrentInstance().addMessage(
					"travelForm:initiator",
					new FacesMessage("Invalid inputs", "Invalid inputs"));
			return "invalid";
		}
		Iterator itr = travelRequest.getTravelResv().iterator();

		while (itr.hasNext()) {
			TravelResv resv1 = (TravelResv) itr.next();
			if (resv1.getTravelDate() == null || resv1.getTravelFrom() == null
					|| resv1.getTravelTo().trim().equals("")
					|| resv1.getModeType().trim().equals("")
					|| resv1.getClassType().trim().equals("")
					|| resv1.getDepTime() == null || resv1.getArrTime() == null
					|| resv1.getAmount() == 0) {
				FacesContext.getCurrentInstance().addMessage(
						"travelForm:initiator",
						new FacesMessage("Invalid travel inputs",
								"Invalid travel inputs"));
				return "invalid";
			}
		}

		/*itr = travelRequest.getHotelResv().iterator();

		while (itr.hasNext()) {
			HotelResv resv2 = (HotelResv) itr.next();
			if (resv2.getPlace() == null || resv2.getCheckIn() == null
					|| resv2.getCheckOut() == null || resv2.getName() == null
					|| resv2.getAmount() == 0) {
				FacesContext.getCurrentInstance().addMessage(
						"travelForm:initiator",
						new FacesMessage("Invalid hotel inputs",
								"Invalid hotel inputs"));
				return "invalid";
			}
		}*/

		System.out.println("hello.... hi "
				+ travelRequest.getDate()
				+ " "
				+ travelRequest.getEmployee().getName()
				+ " "
				+ travelRequest.getEmployee().getDesignation()
				+ " "
				+ travelRequest.getEmployee().getEmailId()
				+ " "
				+ travelRequest.getEmployee().getTelephoneExt()
				+ " "
				+ travelRequest.getEmployee().getDepartment()
				+ " "
				+ travelRequest.getTravelDetails().getPurpose()
				+ " "
				+ travelRequest.getTravelDetails().getStartDate()
				+ " "
				+ travelRequest.getTravelDetails().getEndDate()
				+ " "
				+ travelRequest.getType()
				+ " "
				+ travelRequest.getEmployee().getGrade()
				+ " "
				+ travelRequest.getTravelDetails().getAllowance().getDays()
				+ " "
				+ travelRequest.getTravelDetails().getAllowance()
						.getAirportTransport()
				+ " "
				+ travelRequest.getTravelDetails().getAllowance()
						.getDailyAllowance()
				+ " "
				+ travelRequest.getTravelDetails().getAllowance()
						.getConveyance() + " ");

		itr = travelRequest.getTravelResv().iterator();

		while (itr.hasNext()) {
			TravelResv resv1 = (TravelResv) itr.next();
			System.out.println("travel .... " + resv1.getTravelDate() + " "
					+ resv1.getTravelFrom() + " " + resv1.getTravelTo() + " "
					+ resv1.getModeType() + " " + resv1.getClassType() + " "
					+ resv1.getDepTime() + " " + resv1.getArrTime() + " "
					+ resv1.getAmount() + " ");
		}

		itr = travelRequest.getHotelResv().iterator();

		while (itr.hasNext()) {
			HotelResv resv2 = (HotelResv) itr.next();
			System.out.println("hotel .... " + resv2.getPlace() + " "
					+ resv2.getCheckIn() + " " + resv2.getCheckOut() + " "
					+ resv2.getName() + " " + resv2.getAmount() + " ");
		}

		RequestApproval approval = new RequestApproval();
		approval.setApprovorType("finance");
		travelRequest.getRequestApprovals().add(approval);
		this.processAllowance();
		this.calculateAmount();
		travelRequest=travelRequestDao.merge(travelRequest);
		travelRequestDao.persist(travelRequest);
		travelRequest.setControl(true);

		boolean processSuccess = true;

		if (processSuccess) {
			System.out.println("Sending email");
			sendEmailForRequestInitiation();
		}

		// Send email
		
		return "result";
	}

	public String financeAccept() {
		setFinanceRequestApproval(Boolean.TRUE);
		travelRequestDao.persist(travelRequest);
		return "travelSummary";
	}

	public String financeReject() {
		setFinanceRequestApproval(Boolean.FALSE);
		travelRequestDao.persist(travelRequest);
		return "travelSummary";
	}

	private void setFinanceRequestApproval(Boolean val) {
		travelRequest.setShowTravelApproval(false);
		RequestApproval financeApproval = null;
		if (travelRequest.getRequestApprovals() != null) {
			for (RequestApproval approval : travelRequest.getRequestApprovals()) {
				if (approval != null
						&& "finance".equals(approval.getApprovorType())) {
					financeApproval = approval;
				}
			}
			if (financeApproval != null) {
				financeApproval.setApproved(val);
				financeApproval.setProcessed(Boolean.TRUE);
				sendEmailForRequesrApproved(financeApproval);
			}
		}
	}

	private void sendEmailForRequestInitiation() {
		// 1. Send email to employee
		List<String> emailIds = new ArrayList<String>();
		emailIds.add(travelRequest.getEmployee().getEmailId());
		this.emailComponent.sendMails(emailIds, travelRequest
				.getEmailSubjectForEmployeeInitiation(), travelRequest
				.getEmailBodyForEmployeeInitiation());
		// 2. Send email to Travel Desk
		emailIds = new ArrayList<String>();
		emailIds.add(EmailConstants.FINANCE_DESK_EMAIL);
		this.emailComponent.sendMails(emailIds, travelRequest
				.getEmailSubjectForTravelDesk(), travelRequest
				.getEmailBodyForTravelDesk());
	}

	private void sendEmailForRequesrApproved(RequestApproval financeApproval) {
		// 1. Send email to employee
		List<String> emailIds = new ArrayList<String>();
		emailIds.add(travelRequest.getEmployee().getEmailId());
		this.emailComponent.sendMails(emailIds, travelRequest
				.getEmailSubjectForEmployeeTravelDeskApproved(financeApproval
						.getApproved()), travelRequest
				.getEmailBodyForEmployeeTravelDeskApproved(financeApproval
						.getApproved(), financeApproval.getComments()));
	}

	public void submit() {

	}

	public void sendMail() {

	}

	public String sendReqId() {
			System.out.println(" Inside TravelProcessor");
			System.out.println("TravelParamBean is null:"+travelParamBean);
			// travelRequestDao.findById(reqId);
			System.out.println("TravelParamBean: role"+travelParamBean.getRole());
			System.out.println("TravelParamBean: reqId"+travelParamBean.getReqId());
			travelRequest = travelRequestDao.findById(travelParamBean.getReqId());
			new FacesElUtils().setValue(FacesContext.getCurrentInstance(), "#{travelRequest}", travelRequest);
			travelRequest.enableAllFields();
			this.enableFields3();
			return "travelSummary";
	}
	
	
	
	public List<TravelRequest> getTravelRequests() {
		if(travelRequests==null)
		{
			travelRequests= travelRequestDao.findIt();
			System.out.println("travelRrquests is null");
		}
		return travelRequests;
}
	
	public List<TravelRequest> getSearchResults() {
		if(this.getSearchItem()!=null)
			x=this.getSearchItem();
		else if(x==null)
			x="type";
		System.out.println(x+" "+searchElement);
		if(currentSearchItem!=x || currentSearchElement!=searchElement)
			searchResults= travelRequestDao.findElement(x,searchElement);
		currentSearchItem=x;
		currentSearchElement=searchElement;
		return searchResults;
}
	public String displaySummary() {
		System.out.println("Printing.............");
		travelRequest = travelRequestDao.findById(travelParamBean.getReqId());
		new FacesElUtils().setValue(FacesContext.getCurrentInstance(), "#{travelRequest}", travelRequest);
		return "travelSummary";
}
	public String showTravelSummary() {
		System.out.println("show travel.............");
		if(travelRequests==null) travelRequests=searchResults;
		travelParamBean.setReqId(travelRequests.get(rowIndex).getId());
		travelParamBean.setRole("finance");
		return this.displaySummary();
	}
	
	public void addTravelResvRow() {
		travelRequest.addTravelResvRow();
		focusField = "travel";
		int size = travelRequest.getTravelResv().size() - 1;
		focusFieldSize = "" + size;
		determineClass();
		this.enableFields4(size+1);
	}
	
	public void removeTravelResvRow() {
		int size = travelRequest.getTravelResv().size();
		System.out.println(size);
		if(size>1)
			travelRequest.getTravelResv().remove(rowIndex);
		size = travelRequest.getTravelResv().size();
		this.enableFields4(size);
		this.calculateAmount();
	}
	

	public void addHotelResvRow() {

		travelRequest.addHotelResvRow();
		focusField = "hotel";
		int size = travelRequest.getHotelResv().size() - 1;
		focusFieldSize = "" + size;
		this.enableFields5(size+1);
	}
	
	public void removeHotelResvRow() {
		int size = travelRequest.getHotelResv().size();
		System.out.println(size);
		if(size>1)
			travelRequest.getHotelResv().remove(rowIndex);
		size = travelRequest.getHotelResv().size();
		this.enableFields5(size);
		this.calculateAmount();
	}
	
	public EmailComponent getEmailComponent() {
		return emailComponent;
	}

	public void setEmailComponent(EmailComponent emailComponent) {
		this.emailComponent = emailComponent;
	}

	public TravelParamBean getTravelParamBean() {
		return travelParamBean;
	}

	public void setTravelParamBean(TravelParamBean travelParamBean) {
		this.travelParamBean = travelParamBean;
	}

}
